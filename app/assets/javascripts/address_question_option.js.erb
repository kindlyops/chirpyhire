$(document).on("turbolinks:load", function() {
  if($(".question #address-question-option").length) {
    mapboxgl.accessToken = mapboxgl.accessToken || '<%= ENV.fetch("MAPBOX_PUBLIC_KEY") %>';
    var isDragging, isCursorOverPoint;
    var longitude = $("#address_question_address_question_option_attributes_longitude").val();
    var latitude = $("#address_question_address_question_option_attributes_latitude").val();
    var coordinates = $("#coordinates").get(0);
    var map = new mapboxgl.Map({
      container: 'map',
      style: 'mapbox://styles/harryw/cioz0jzv4000kavm7ndil75zx',
      center: [longitude, latitude],
      zoom: 10
    });

    var canvas = map.getCanvasContainer();

    var geojson = {
      "type": "FeatureCollection",
      "features": [{
        "type": "Feature",
        "geometry": {
          "type": "Point",
          "coordinates": [longitude, latitude]
        }
      }]
    }

    function mouseDown() {
      if (!isCursorOverPoint) return;

      isDragging = true;

      // Set a cursor indicator
      canvas.style.cursor = 'grab';

      // Mouse events
      map.on('mousemove', onMove);
      map.on('mouseup', onUp);
    }

    function touchStart(e) {
      var features = map.queryRenderedFeatures(e.point, { layers: ['point'] });

      // Change point and cursor style as a UI indicator
      // and set a flag to enable other mouse events.
      if (features.length) {
        map.setPaintProperty('point', 'circle-color', '#3bb2d0');
        isCursorOverPoint = true;
        map.dragPan.disable();
        isDragging = true;

        map.on('touchmove', onMove);
        map.on('touchend', onTouchEnd);
      } else {
        map.setPaintProperty('point', 'circle-color', '#3887be');
        isCursorOverPoint = false;
        map.dragPan.enable();
      }
    }

    function onMove(e) {
      if (!isDragging) return;

      var coords = e.lngLat;
      // Set a UI indicator for dragging.
      canvas.style.cursor = 'grabbing';

      // Update the Point feature in `geojson` coordinates
      // and call setData to the source layer `point` on it.
      geojson.features[0].geometry.coordinates = [coords.lng, coords.lat];
      map.getSource('point').setData(geojson);
    }

    function onTouchEnd(e) {
      if (!isDragging) return;

      var coords = geojson.features[0].geometry.coordinates;

      // Print the coordinates of where the point had
      // finished being dragged to on the map.
      coordinates.style.display = 'block';
      coordinates.innerHTML = 'Longitude: ' + coords[0] + '<br />Latitude: ' + coords[1];
      canvas.style.cursor = '';
      isDragging = false;
      map.off('touchmove', onMove);
    }

    function onUp(e) {
      if (!isDragging) return;

      var coords = e.lngLat;

      // Print the coordinates of where the point had
      // finished being dragged to on the map.
      coordinates.style.display = 'block';
      coordinates.innerHTML = 'Longitude: ' + coords.lng + '<br />Latitude: ' + coords.lat;
      canvas.style.cursor = '';
      isDragging = false;
      map.off('mousemove', onMove);
    }

    map.on('load', function() {

      // Add a single point to the map
      map.addSource('point', {
        "type": "geojson",
        "data": geojson
      });

      map.addLayer({
        "id": "point",
        "type": "circle",
        "source": "point",
        "paint": {
          "circle-radius": 10,
          "circle-color": "#3887be"
        }
      });

      // If a feature is found on map movement,
      // set a flag to permit a mousedown events.
      map.on('mousemove', function (e) {
        var features = map.queryRenderedFeatures(e.point, { layers: ['point'] });

        // Change point and cursor style as a UI indicator
        // and set a flag to enable other mouse events.
        if (features.length) {
          map.setPaintProperty('point', 'circle-color', '#3bb2d0');
          canvas.style.cursor = 'move';
          isCursorOverPoint = true;
          map.dragPan.disable();
        } else {
          map.setPaintProperty('point', 'circle-color', '#3887be');
          canvas.style.cursor = '';
          isCursorOverPoint = false;
          map.dragPan.enable();
        }
      });

      // Set `true` to dispatch the event before other functions call it. This
      // is necessary for disabling the default map dragging behaviour.
      map.on('mousedown', mouseDown, true);
      map.on('touchstart', touchStart, true);
    });

    if($("#address-question-option .nested-fields").length) {
      $(".add_fields").hide();
    }

    $(document).on('cocoon:before-insert', '#address-question-option', function(e, option) {
      $(".add_fields").hide();
    });

    $(document).on('cocoon:after-remove', '#address-question-option', function(e, option) {
      $(".add_fields").show();
    });
  }
});
