(function(){
  mapboxgl.accessToken = mapboxgl.accessToken || '<%= ENV.fetch("MAPBOX_PUBLIC_KEY") %>';
  var milesPerPixel = 0.00004660282;

  App.Map = function(args) {
    this.center = args.center;
    this.zoom = args.zoom;
    this.sources = args.sources;
    this.layers = args.layers;
    this.draggableLayer = args.draggableLayer;
    this.popupLayers = args.popupLayers || [];
    this.hoverLayerConfigs = args.hoverLayerConfigs || [];
    this._init();
  };

  App.Map.milesToPixelsAtMaxZoom = function(miles, latitude) {
    return miles / milesPerPixel / Math.cos(latitude * Math.PI / 180);
  }

  App.Map.prototype = {
    remove: function() {
      this._map.remove();
    },
    loaded: function() {
      return this._map.loaded();
    },
    on: function(type, listener) {
      this._map.on(type, listener);
    },
    setLayoutProperty: function(layer, name, value) {
      this._map.setLayoutProperty(layer, name, value);
    },
    setPaintProperty: function(layer, name, value, klass) {
      this._map.setPaintProperty(layer, name, value, klass);
    },
    _init: function() {
      this._initMap();
      if (this.popupLayers.length) {
        this._initPopup();
      }
      if (this.hoverLayerConfigs.length) {
        this._initHover();
      }

      if(this._map.loaded()) {
        this._addSourcesAndLayers();
      } else {
        this._map.on('load', this._addSourcesAndLayers.bind(this))
      }
    },
    _initMap: function() {
      this._map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/harryw/cioz0jzv4000kavm7ndil75zx',
        center: this.center,
        zoom: this.zoom
      });
    },
    _initPopup: function() {
      this.popup = new mapboxgl.Popup({
        closeButton: false,
        closeOnClick: false
      });

      this._map.on('mousemove', function(e) {
        var features = this._map.queryRenderedFeatures(e.point, { layers: this.popupLayers });
        this._map.getCanvas().style.cursor = (features.length) ? 'pointer' : '';

        if (!features.length) {
          this.popup.remove();
          return;
        }

        var feature = features[0];

        this.popup.setLngLat(this._determineLngLat(feature))
          .setHTML(feature.properties.description)
          .addTo(this._map);
      }.bind(this));
    },
    _initHover: function() {
      this._map.on('mousemove', function(e) {
        this.hoverLayerConfigs.forEach(function(hoverConfig) {
          var triggerLayerId = hoverConfig.layers[0].id,
            hoverLayerId = hoverConfig.layers[1].id,
            features = this._map.queryRenderedFeatures(e.point, { layers: [triggerLayerId] });

          if (features.length) {
            this._map.setFilter(hoverLayerId, hoverConfig.hoverOnFilterFunction(features[0]));
          } else {
            this._map.setFilter(hoverLayerId, hoverConfig.hoverOffFilter);
          }
        }.bind(this));
      }.bind(this));
    },
    _addSources: function() {
      _.each(this.sources, _.bind(function(source) {
        this._map.addSource(source.id, {
          "type": source.type,
          "data": source.data
        });
      }, this));
    },
    _addDraggableLayers: function() {
      if(this.draggableLayer) {
        this.isDragging = false;
        this._isCursorOverPoint = false;
        this._canvas = this._map.getCanvasContainer();

        this._map.on('mousemove', _.bind(function (e) {
          var features = this._map.queryRenderedFeatures(e.point, { layers: [this.draggableLayer] });
          if (features.length) {
            this._map.setPaintProperty(this.draggableLayer, 'circle-color', '#3bb2d0');
            this._canvas.style.cursor = 'move';
            this._isCursorOverPoint = true;
            this._map.dragPan.disable();
          } else {
            this._map.setPaintProperty(this.draggableLayer, 'circle-color', '#3887be');
            this._canvas.style.cursor = '';
            this._isCursorOverPoint = false;
            this._map.dragPan.enable();
          }
        }, this));

        // Set `true` to dispatch the event before other functions call it. This
        // is necessary for disabling the default map dragging behaviour.
        this._map.on('mousedown', this._mouseDown.bind(this), true);
        this._map.on('touchstart', this._touchStart.bind(this), true);
      }
    },
    _addLayers: function() {
      _.each(this.layers, _.bind(function(layer) {
        this._map.addLayer(layer);
      }, this));

      this._addDraggableLayers();
    },
    _addSourcesAndLayers: function() {
      this._addSources();
      this._addLayers();
    },
    _mouseDown: function() {
      if (!this._isCursorOverPoint) return;

      this.isDragging = true;
      this._canvas.style.cursor = 'grab';

      this._map.on('mousemove', this._onMove.bind(this));
      this._map.on('mouseup', this._onUp.bind(this));
    },
    _touchStart: function(e) {
      e.originalEvent.preventDefault();
      var features = this._map.queryRenderedFeatures(e.point, { layers: [this.draggableLayer] });

      if (features.length) {
        this._map.setPaintProperty(this.draggableLayer, 'circle-color', '#3bb2d0');
        this._isCursorOverPoint = true;
        this._map.dragPan.disable();
        this.isDragging = true;

        this._map.on('touchmove', this._onMove.bind(this));
        this._map.on('touchend', this._onTouchEnd.bind(this));
      } else {
        this._map.setPaintProperty(this.draggableLayer, 'circle-color', '#3887be');
        this._isCursorOverPoint = false;
        this._map.dragPan.enable();
      }
    },
    _onMove: function(e) {
      if (!this.isDragging) return;

      var coords = e.lngLat;
      this._canvas.style.cursor = 'grabbing';
      var draggableSource = this.draggableSource();
      draggableSource.data.features[0].geometry.coordinates = [coords.lng, coords.lat];
      this._map.getSource(draggableSource.id).setData(draggableSource.data);
    },
    _onUp: function(e) {
      if (!this.isDragging) return;

      this._canvas.style.cursor = '';
      this.isDragging = false;
      this._map.off('mousemove', this._onMove.bind(this));
    },
    _determineLngLat: function(feature) {
      if (feature.geometry.type === 'Point') {
        return feature.geometry.coordinates
      }
      // Mapbox unfortunately does forced data sanitization that we have to undo
      return feature.properties.center.split(",").map(function(num) { return parseFloat(num) })
    },
    draggableSource: function() {
      return _.find(this.sources, _.bind(function(source) {
        return source.id === this.draggableLayer;
      }, this));
    },
    _onTouchEnd: function(e) {
      if (!this.isDragging) return;

      this._canvas.style.cursor = '';
      this.isDragging = false;
      this._map.setPaintProperty('point', 'circle-color', '#3887be');
      this._isCursorOverPoint = false;
      this._map.dragPan.enable();
      this._map.off('touchmove', this._onMove.bind(this));
    }
  };

  return App.Map;
})()
